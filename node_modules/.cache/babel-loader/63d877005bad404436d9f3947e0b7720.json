{"ast":null,"code":"import _defineProperty from \"/Users/Mehdi/Junction2019/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//import * as Questions from '../db.json';\nexport const initialDataState = {\n  type: '',\n  questions: []\n};\nexport const dataReducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_QUESTIONS\":\n      return _objectSpread({}, state, {\n        questions: action.payload\n      });\n\n    case \"ADD_QUESTIONS\":\n      return _objectSpread({}, state, {\n        questions: state.questions.concat(action.payload)\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/Mehdi/Junction2019/src/reducers/dataReducer.ts"],"names":["initialDataState","type","questions","dataReducer","state","action","payload","concat"],"mappings":";;;;;;AAAA;AAuBA,OAAO,MAAMA,gBAA2B,GAAG;AACzCC,EAAAA,IAAI,EAAE,EADmC;AAEzCC,EAAAA,SAAS,EAAE;AAF8B,CAApC;AAQP,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAmBC,MAAnB,KAA0C;AACnE,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAK,iBAAL;AACE,+BAAYG,KAAZ;AAAmBF,QAAAA,SAAS,EAAEG,MAAM,CAACC;AAArC;;AACF,SAAK,eAAL;AACE,+BAAYF,KAAZ;AAAmBF,QAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBK,MAAhB,CAAuBF,MAAM,CAACC,OAA9B;AAA9B;;AACF;AACE,aAAOF,KAAP;AANJ;AAQD,CATM","sourcesContent":["//import * as Questions from '../db.json';\n\n\nexport interface IQuestion {\n  id?: string;\n  type: string;\n  question: string;\n  options: string[];\n  answer: string;\n}\n\ninterface IQuest {\n  id?: string;\n  question: string;\n  options: string[];\n  answer: string;\n}\n\nexport interface DataState {\n    type: string;\n    questions: IQuest[];\n}\n\nexport const initialDataState: DataState = {\n  type: '',\n  questions: []\n};\nexport type DataAction = \n| { type: \"FETCH_QUESTIONS\"; payload: IQuest[] }\n| { type: \"ADD_QUESTIONS\"; payload: IQuest };\n\nexport const dataReducer = (state: DataState, action: DataAction) => {\n  switch (action.type) {\n    case \"FETCH_QUESTIONS\":\n      return { ...state, questions: action.payload };\n    case \"ADD_QUESTIONS\":\n      return { ...state, questions: state.questions.concat(action.payload) };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
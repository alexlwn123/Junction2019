import * as React from 'react'
import styled from 'styled-components'
import { appConstants } from '../utilities'

export class DraggableContainer extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      position: { x: props.x ? props.x : 100, y: props.y ? props.y : 0 },
      mouseDownOffset: { x: 0, y: 0 },
      isDragging: false,
    }
  }

  componentWillMount() {
    document.addEventListener('mouseup', this.handleMouseUp)
    document.addEventListener('mousemove', this.handleMouseMove)
    document.addEventListener('touchend', this.handleMouseUp)
    document.addEventListener('touchmove', this.handleMouseMove)
  }

  componentWillUnmount() {
    document.removeEventListener('mouseup', this.handleMouseUp)
    document.removeEventListener('mousemove', this.handleMouseMove)
    document.removeEventListener('touchend', this.handleMouseUp)
    document.removeEventListener('touchmove', this.handleMouseMove)
  }

  handleMouseDown = e => {
    this.setState({
      mouseDownOffset: {
        x: e.pageX - this.state.position.x,
        y: e.pageY - this.state.position.y,
      },
      isDragging: true,
    })
  }

  handleMouseUp = e => {
    if (!this.state.isDragging) return

    this.setState({
      isDragging: false,
      position: {
        x: e.pageX - this.state.mouseDownOffset.x,
        y: e.pageY - this.state.mouseDownOffset.y,
      },
    })
  }

  handleMouseMove = e => {
    if (!this.state.isDragging) return

    this.setState({
      position: {
        x: e.pageX - this.state.mouseDownOffset.x,
        y: e.pageY - this.state.mouseDownOffset.y,
      },
    })
  }

  render() {
    const variableStyles = {
      top: `${this.state.position.y}px`,
      left: `${this.state.position.x}px`,
    }

    return (
      <Container {...variableStyles} onMouseDown={this.handleMouseDown}>
        {this.props.children}
      </Container>
    )
  }
}

const Container = styled.div.attrs(props => ({
  style: {
    top: props.top,
    left: props.left,
  },
}))`
  width: 200px;
  height: auto;
  position: fixed;
  display: flex;

  flex-direction: column;
  justify-content: start;
  background-color: rgba(190, 190, 150, 0.2);
  cursor: pointer;
  border: 2px solid ${appConstants.colors.black};
  text-align: left;
`

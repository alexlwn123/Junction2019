function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { EAST, NORTH, WEST } from './constants';

function isBigFood(_ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      posX = _ref2[0],
      posY = _ref2[1];

  return (posX === 0 || posX === 25) && (posY === 6 || posY === 26);
}

function generateFood() {
  var genRow = function genRow(startX, posY, num) {
    return new Array(num).fill(0).map(function (item, index) {
      return [startX + index, posY];
    });
  };

  var genDisparateRow = function genDisparateRow(xPoints, posY) {
    return xPoints.map(function (posX) {
      return [posX, posY];
    });
  };

  var genContinuousRow = function genContinuousRow(ranges, posY) {
    return ranges.reduce(function (items, _ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          startX = _ref4[0],
          num = _ref4[1];

      return [].concat(_toConsumableArray(items), _toConsumableArray(genRow(startX, posY, num)));
    }, []);
  };

  var genCol = function genCol(posX, startY, num) {
    return new Array(num).fill(0).map(function (item, index) {
      return [posX, startY + index];
    });
  };

  return [].concat(_toConsumableArray(genRow(0, 0, 26)), _toConsumableArray(genDisparateRow([0, 11, 14, 25], 1)), _toConsumableArray(genDisparateRow([0, 11, 14, 25], 2)), _toConsumableArray(genContinuousRow([[0, 6], [8, 4], [14, 4], [20, 6]], 3)), _toConsumableArray(genDisparateRow([2, 5, 8, 17, 20, 23], 4)), _toConsumableArray(genDisparateRow([2, 5, 8, 17, 20, 23], 5)), _toConsumableArray(genContinuousRow([[0, 3], [5, 7], [14, 7], [23, 3]], 6)), _toConsumableArray(genDisparateRow([0, 5, 11, 14, 20, 25], 7)), _toConsumableArray(genDisparateRow([0, 5, 11, 14, 20, 25], 8)), _toConsumableArray(genContinuousRow([[0, 12], [14, 12]], 9)), _toConsumableArray(genCol(5, 10, 11)), _toConsumableArray(genCol(20, 10, 11)), _toConsumableArray(genContinuousRow([[0, 6], [8, 4], [14, 4], [20, 6]], 21)), _toConsumableArray(genDisparateRow([0, 5, 8, 17, 20, 25], 22)), _toConsumableArray(genDisparateRow([0, 5, 8, 17, 20, 25], 23)), _toConsumableArray(genRow(0, 24, 26)), _toConsumableArray(genDisparateRow([0, 5, 11, 14, 20, 25], 25)), _toConsumableArray(genDisparateRow([0, 5, 11, 14, 20, 25], 26)), _toConsumableArray(genDisparateRow([0, 5, 11, 14, 20, 25], 27)), _toConsumableArray(genContinuousRow([[0, 12], [14, 12]], 28))).map(function (position, index) {
    return {
      key: index,
      position: position,
      eaten: false,
      big: isBigFood(position)
    };
  });
}

export default function getInitialState() {
  return {
    stepTime: Date.now(),
    score: 0,
    player: {
      position: [12.5, 6],
      direction: EAST,
      nextDirection: EAST,
      lives: 3
    },
    lost: false,
    monsters: [{
      id: 'monster-red',
      direction: NORTH,
      startingDirection: NORTH,
      position: [12.5, 15],
      startingPosition: [12.5, 15],
      deadTime: 0,
      eatingTime: 0,
      color: 'red'
    }, {
      id: 'monster-cyan',
      direction: EAST,
      startingDirection: EAST,
      position: [10.5, 15],
      startingPosition: [10.5, 15],
      deadTime: 0,
      eatingTime: 0,
      color: 'cyan',
      directionBias: true
    }, {
      id: 'monster-orange',
      direction: WEST,
      startingDirection: WEST,
      position: [14.5, 15],
      startingPosition: [14.5, 15],
      deadTime: 0,
      eatingTime: 0,
      color: 'darkorange'
    }, {
      id: 'monster-pink',
      direction: NORTH,
      startingDirection: NORTH,
      position: [12.5, 17],
      startingPosition: [12.5, 17],
      deadTime: 0,
      eatingTime: 0,
      color: 'pink',
      directionBias: true
    }],
    food: generateFood()
  };
}
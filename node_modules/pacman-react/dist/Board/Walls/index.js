function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React from 'react';
import { WALL_COLOUR } from '../../constants';
import Line from '../../grid/Line';
import walls from './walls.json';
export default function Walls(props) {
  var lineProps = {
    strokeWidth: 1,
    stroke: WALL_COLOUR,
    fill: 'none'
  };
  var linesWalls = Object.keys(walls).map(function (key) {
    var parts = walls[key].parts.map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 3),
          distance = _ref2[0],
          direction = _ref2[1],
          radius = _ref2[2];

      return {
        distance: distance,
        direction: direction,
        radius: radius
      };
    });
    return React.createElement(Line, _extends({
      key: key
    }, props, lineProps, {
      start: walls[key].start,
      parts: parts
    }));
  });
  return React.createElement("g", {
    className: "walls"
  }, linesWalls);
}
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { cssPosition } from '../helpers';
import './style.scss';

function MonsterEye(_ref) {
  var radius = _ref.radius,
      offset = _ref.offset,
      direction = _ref.direction;
  var eyeballCenterX = radius * (1 + 0.4 * offset);
  var eyeballCenterY = radius * 0.7;
  var eyeballRadius = radius * 0.3;
  var reverse = Math.pow(-1, (direction < 2) >> 0);
  var vertical = direction % 2;
  var horizontal = 1 - vertical;
  var irisOffsetX = -horizontal * reverse;
  var irisOffsetY = vertical * reverse;
  var outerProps = {
    cx: eyeballCenterX,
    cy: eyeballCenterY,
    'r': eyeballRadius,
    fill: 'white'
  };
  var irisProps = {
    cx: eyeballCenterX + eyeballRadius / 2 * irisOffsetX,
    cy: eyeballCenterY + eyeballRadius / 2 * irisOffsetY,
    'r': eyeballRadius / 2,
    fill: 'black'
  };
  return React.createElement("g", {
    className: "eye"
  }, React.createElement("circle", outerProps), React.createElement("circle", irisProps));
}

MonsterEye.propTypes = {
  radius: PropTypes.number.isRequired,
  offset: PropTypes.number.isRequired,
  direction: PropTypes.number.isRequired
};

function getMonsterPath(radius) {
  var width = radius * 2;
  var height = radius * 2;
  var radiusSmall = radius / 5;
  return ["M".concat(radius, ",0"), "A".concat(radius, ",").concat(radius, " 0 0 1 ").concat(width, ",").concat(radius), "L".concat(width, ",").concat(height - radiusSmall), "A".concat(radiusSmall, ",").concat(radiusSmall, " 0 0 1 ").concat(width - radiusSmall * 2, ",").concat(height - radiusSmall), "A".concat(radiusSmall, ",").concat(radiusSmall, " 0 0 0 ").concat(width - radiusSmall * 4, ",").concat(height - radiusSmall), "A".concat(radiusSmall, ",").concat(radiusSmall, " 0 0 1 ").concat(width - radiusSmall * 6, ",").concat(height - radiusSmall), "A".concat(radiusSmall, ",").concat(radiusSmall, " 0 0 0 ").concat(width - radiusSmall * 8, ",").concat(height - radiusSmall), "A".concat(radiusSmall, ",").concat(radiusSmall, " 0 0 1 ").concat(width - radiusSmall * 10, ",").concat(height - radiusSmall), "L0,".concat(height - radiusSmall), "L0,".concat(radius), "A".concat(radius, ",").concat(radius, " 0 0 1 ").concat(radius, ",0")].join(' ');
}

function WaveMouth(_ref2) {
  var gridSize = _ref2.gridSize,
      eating = _ref2.eating;

  if (!eating) {
    return null;
  }

  var waveRadius = gridSize * 0.125;
  var yPos = gridSize * 0.95;
  var mouthPath = ["M".concat(waveRadius * 2, ",").concat(yPos), "A".concat(waveRadius, ",").concat(waveRadius * 5, " 0 0 1 ").concat(3 * waveRadius, ",").concat(yPos), "A".concat(waveRadius, ",").concat(waveRadius * 5, " 0 0 0 ").concat(4 * waveRadius, ",").concat(yPos), "A".concat(waveRadius, ",").concat(waveRadius * 5, " 0 0 1 ").concat(5 * waveRadius, ",").concat(yPos), "A".concat(waveRadius, ",").concat(waveRadius * 5, " 0 0 0 ").concat(6 * waveRadius, ",").concat(yPos), "A".concat(waveRadius, ",").concat(waveRadius * 5, " 0 0 1 ").concat(7 * waveRadius, ",").concat(yPos), "A".concat(waveRadius, ",").concat(waveRadius * 5, " 0 0 0 ").concat(8 * waveRadius, ",").concat(yPos), "A".concat(waveRadius, ",").concat(waveRadius * 5, " 0 0 1 ").concat(9 * waveRadius, ",").concat(yPos), "A".concat(waveRadius, ",").concat(waveRadius * 5, " 0 0 0 ").concat(10 * waveRadius, ",").concat(yPos)].join(' ');
  return React.createElement("path", {
    d: mouthPath,
    stroke: "white",
    strokeWidth: 1
  });
}

WaveMouth.propTypes = {
  gridSize: PropTypes.number.isRequired,
  eating: PropTypes.bool.isRequired
};

function getColor(eating, eatingFlash, color) {
  if (eating) {
    if (eatingFlash) {
      return '#c9a';
    }

    return '#06c';
  }

  return color;
}

function MonsterIcon(_ref3) {
  var gridSize = _ref3.gridSize,
      eating = _ref3.eating,
      eatingFlash = _ref3.eatingFlash,
      position = _ref3.position,
      direction = _ref3.direction,
      color = _ref3.color;
  var radius = gridSize * 0.75;
  var monsterPath = getMonsterPath(radius);
  var pathProps = {
    stroke: 'none',
    fill: getColor(eating, eatingFlash, color)
  };

  var style = _objectSpread({}, cssPosition(position, gridSize), {
    width: radius * 2,
    height: radius * 2,
    marginLeft: -radius,
    marginTop: -radius
  });

  return React.createElement("svg", {
    className: "pacman-monster",
    style: style
  }, React.createElement("path", _extends({
    d: monsterPath
  }, pathProps)), React.createElement(WaveMouth, {
    gridSize: gridSize,
    eating: eating
  }), React.createElement(MonsterEye, {
    radius: radius,
    direction: direction,
    offset: -1
  }), React.createElement(MonsterEye, {
    radius: radius,
    direction: direction,
    offset: 1
  }));
}

MonsterIcon.propTypes = {
  eating: PropTypes.bool.isRequired,
  eatingFlash: PropTypes.number,
  gridSize: PropTypes.number.isRequired,
  position: PropTypes.array.isRequired,
  color: PropTypes.string.isRequired,
  direction: PropTypes.number.isRequired
};

var Monster =
/*#__PURE__*/
function (_Component) {
  _inherits(Monster, _Component);

  function Monster(props) {
    var _this;

    _classCallCheck(this, Monster);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Monster).call(this, props));
    _this.state = {
      eatingFlash: 0,
      timerFlash: _this.getTimerFlash()
    };
    return _this;
  }

  _createClass(Monster, [{
    key: "getTimerFlash",
    value: function getTimerFlash() {
      var _this2 = this;

      if (this.state) {
        clearInterval(this.state.timerFlash);
      }

      if (!this.props.eatingTime) {
        return null;
      }

      return setInterval(function () {
        _this2.setState({
          eatingFlash: (_this2.state.eatingFlash + 1) % 2
        });
      }, 500);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.eatingTime > 0 && prevProps.eatingTime === 0 || this.props.eatingTime === 0 && prevProps.eatingTime > 0) {
        this.setState({
          timerFlash: this.getTimerFlash()
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearInterval(this.state.timerFlash);
    }
  }, {
    key: "render",
    value: function render() {
      if (this.props.deadTime > 0) {
        return null;
      }

      var _this$props = this.props,
          eatingTime = _this$props.eatingTime,
          props = _objectWithoutProperties(_this$props, ["eatingTime"]);

      var eating = eatingTime > 0;
      return React.createElement(MonsterIcon, _extends({
        eating: eating
      }, props, this.state));
    }
  }]);

  return Monster;
}(Component);

Monster.propTypes = {
  gridSize: PropTypes.number.isRequired,
  position: PropTypes.array.isRequired,
  direction: PropTypes.number.isRequired,
  color: PropTypes.string.isRequired,
  eatingTime: PropTypes.number.isRequired,
  deadTime: PropTypes.number.isRequired
};
export { Monster as default };
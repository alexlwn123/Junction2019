function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { PLAYER_RADIUS } from '../constants';
import { cssPosition } from '../helpers';
import './style.scss';
var ANIMATION_SPEED = 30;

function pacmanPath(radius, angle, offset) {
  if (!angle) {
    return ["M0,".concat(radius), "A".concat(radius, ",").concat(radius, " 0 1 0 ").concat(radius * 2, ",").concat(radius), "A".concat(radius, ",").concat(radius, " 0 1 0 0,").concat(radius)].join(' ');
  }

  var offsetX = radius * Math.cos(angle / 2);
  var offsetY = radius * Math.sin(angle / 2);
  var polarity = Math.pow(-1, Math.floor(offset / 2));
  var m00 = (offset + 1) % 2 * polarity;
  var m01 = offset % 2 * polarity;
  var biteX1 = offsetX * m00 - offsetY * m01;
  var biteY1 = -offsetX * m01 - offsetY * m00;
  var biteX2 = offsetX * m00 + offsetY * m01;
  var biteY2 = -offsetX * m01 + offsetY * m00;
  var arcFlag = (angle < Math.PI) >> 0;
  return ["M".concat(radius, ",").concat(radius), "L".concat(radius + biteX1, ",").concat(radius + biteY1), "A".concat(radius, ",").concat(radius), "0 ".concat(arcFlag, " 0"), "".concat(radius + biteX2, ",").concat(radius + biteY2), "L".concat(radius, ",").concat(radius)].join(' ');
}

var Player =
/*#__PURE__*/
function (_Component) {
  _inherits(Player, _Component);

  function Player(props) {
    var _this;

    _classCallCheck(this, Player);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Player).call(this, props));
    _this.state = {
      angle: 1,
      timerBite: null,
      timerLose: null
    };
    _this.startTime = Date.now();
    return _this;
  }

  _createClass(Player, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.setState({
        timerBite: setInterval(function () {
          return _this2.setState({
            angle: 1 + 0.5 * Math.sin((Date.now() - _this2.startTime) / 50)
          });
        }, ANIMATION_SPEED)
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearInterval(this.state.timerBite);
      clearTimeout(this.state.timerLose);
    }
  }, {
    key: "onLoseAnimation",
    value: function onLoseAnimation() {
      var _this3 = this;

      if (this.state.angle < Math.PI * 2) {
        return setTimeout(function () {
          _this3.setState({
            angle: Math.min(Math.PI * 2, _this3.state.angle + 0.1),
            timerLose: _this3.onLoseAnimation()
          });
        }, ANIMATION_SPEED);
      }

      if (this.props.onEnd) {
        setImmediate(function () {
          return _this3.props.onEnd();
        });
      }

      return null;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (!prevProps.lost && this.props.lost) {
        clearInterval(this.state.timerBite);
        clearTimeout(this.state.timerLose);
        this.setState({
          angle: 0,
          timerLose: this.onLoseAnimation()
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          gridSize = _this$props.gridSize,
          lost = _this$props.lost,
          position = _this$props.position,
          direction = _this$props.direction;
      var pathProps = {
        stroke: 'none',
        fill: 'yellow'
      };
      var radius = gridSize * PLAYER_RADIUS;

      var style = _objectSpread({}, cssPosition(position, gridSize), {
        width: radius * 2,
        height: radius * 2,
        marginLeft: -radius,
        marginTop: -radius
      });

      var offset = lost ? 1 : direction;
      return React.createElement("svg", {
        className: "pacman-player",
        style: style
      }, React.createElement("path", _extends({
        d: pacmanPath(radius, this.state.angle, offset)
      }, pathProps)));
    }
  }]);

  return Player;
}(Component);

export { Player as default };
Player.propTypes = {
  animate: PropTypes.bool,
  gridSize: PropTypes.number.isRequired,
  lost: PropTypes.bool.isRequired,
  position: PropTypes.array.isRequired,
  direction: PropTypes.number.isRequired,
  onEnd: PropTypes.func
};